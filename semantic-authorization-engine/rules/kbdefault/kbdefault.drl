package eu.paasword.drools;

import eu.paasword.drools.Util;

rule "inference-1-Class Transitiveness Inference"
when
    $clazz: Clazz( parent != null , parent.parent != null  ) 
    not ( exists(  Clazz( name==$clazz.name , parent == $clazz.parent.parent ) ) )
then
//    System.out.println( "Class Transitiveness --> New Class has to be created with name: "+ $clazz.getName() +" and parent: "+$clazz.getParent().getParent().getName() );
    Clazz newclazz = new Clazz($clazz.getName(),$clazz.getParent().getParent());
    insert(newclazz);
end


rule "inference-2-Supertype Inheritance Inference"
when

    $instance: InstanceOfClazz( clazz.parent !=null   ) 
    not ( exists(  InstanceOfClazz( name==$instance.name , clazz == clazz.parent ) ) )
then
//    System.out.println( "Supertype Inheritance --> New InstanceOfClass has to be created with name: "+ $instance.getName() +" and class: "+$instance.getClazz().getParent().getName() );
    InstanceOfClazz newinstanceofclazz = new InstanceOfClazz($instance.getName(),$instance.getClazz().getParent());
    insert(newinstanceofclazz);
end


rule "inference-3-Consistency Checking of Knowledge Triples based on Domain Restrictions"
when
    $triple: KnowledgeTriple() 
    not ( exists(  InstanceOfClazz( name == $triple.subject.name , clazz == $triple.predicate.domain ) ) )
then
    System.out.println( "Modelling Error! Invalid Triple1: " + $triple );
    retract($triple);
end

rule "inference-4-Consistency Checking of Knowledge Triples based on Range Restrictions"
when
    $triple: KnowledgeTriple() 
    not ( exists(  InstanceOfClazz( name == $triple.object.name  , clazz == $triple.predicate.range  ) ) )
then
    System.out.println( "Modelling Error! Invalid Triple2: " + $triple );
    retract($triple);
end


rule "inference-5-Consistency Checking of Sub-Property Definition based on Domain Restrictions"
when
    $op: ObjectProperty( parent != null ) 
    eval ( Util.isClassSubclassOfClass($op.getDomain(), $op.getParent().getDomain() ) == false )
then
    System.out.println( "Modelling Error! Invalid Object Sub-Property based on Domain Restrictions: " + $op );
    LogicalError error = new LogicalError("Modelling Error! Invalid Object Sub-Property based on Domain Restrictions: " + $op );
    retract($op);
    insert(error);
end

rule "inference-6-Consistency Checking of Sub-Property Definition based on Range Restrictions"
when
    $op: ObjectProperty( parent != null ) 
    eval ( Util.isClassSubclassOfClass($op.getRange(), $op.getParent().getRange() ) == false )
then
    System.out.println( "Modelling Error! Invalid Object Sub-Property based on Range Restrictions: " + $op );
    retract($op);
end


rule "inference-7-Knowledge Expansion through Range Generalization (make use of Supertype inheritance)"
when
    $triple: KnowledgeTriple() 
    $objectinstance: InstanceOfClazz(name == $triple.object.name, clazz != $triple.object.clazz )
    not ( 
        exists(      
            $newtriple: KnowledgeTriple( predicate == $triple.predicate , subject == $triple.subject, object.name == $triple.object.name , object.clazz != $triple.object.clazz  ) 
        ) 
    )
then
//    System.out.println( "Knowledge Expansion through Range Generalization  --> New Triple has to be created Predicate:"+$triple.getPredicate().getName()+" Subject: "+$triple.getSubject().getName() +"( "+$triple.getSubject().getClazz().getName()+" )"+" Object: "+$objectinstance.getName() + " ( "+$objectinstance.getClazz().getName()+" )" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $triple.getSubject() , $triple.getPredicate() , $objectinstance );
    insert(newtriple);
end


rule "inference-8-Knowledge Expansion through Domain Generalization (make use of Supertype inheritance)"
when
    $triple: KnowledgeTriple() 
    $subjectinstance: InstanceOfClazz(name == $triple.subject.name, clazz != $triple.subject.clazz )
    not ( 
        exists(      
            $newtriple: KnowledgeTriple( predicate == $triple.predicate , object == $triple.object, subject.name == $triple.subject.name , subject.clazz != $triple.subject.clazz  ) 
        ) 
    )
then
//    System.out.println( "Knowledge Expansion through Domain Generalization --> New Triple has to be created Predicate:"+$triple.getPredicate().getName()+" Subject: "+$subjectinstance.getName() +"("+$subjectinstance.getClazz().getName()+")"+" Object: "+$triple.getObject().getName() +"("+$triple.getObject().getClazz().getName()+")" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $subjectinstance , $triple.getPredicate() , $triple.getObject() );
    insert(newtriple);
end


rule "inference-9-Knowledge Expansion through Transitive Property Interpretation"
when
    $pred: ObjectProperty(transitive == true )
    $triple1: KnowledgeTriple( predicate == $pred , $subject1: subject , $object1: object ) 
    $triple2: KnowledgeTriple( predicate == $pred , subject == $object1) 

    not ( 
        exists(      
            KnowledgeTriple( predicate == $pred , subject == $triple1.subject, object == $triple2.object  ) 
        ) 
    )
then
//    System.out.println( "Knowledge Expansion through Transitive Property   --> New Triple has to be created Predicate:"+$pred.getName()+" Subject: "+$triple1.getSubject().getName()+"("+$triple1.getSubject().getClazz().getName()+") Object: "+$triple2.getObject().getName()+"("+$triple2.getObject().getClazz().getName()+")" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $triple1.getSubject() , $pred , $triple2.getObject() );
    insert(newtriple);
end


rule "inference-10-Knowledge Expansion through Sub-Property Generalization"
when
    $pred: ObjectProperty( parent != null )
    $triple: KnowledgeTriple( predicate == $pred , $subject1: subject , $object1: object ) 

    not ( 
        exists(      
            KnowledgeTriple( predicate == $pred.parent , subject == $triple.subject, object == $triple.object  ) 
        ) 
    )
then
//    System.out.println( "Knowledge Expansion through Sub-Property Generalization --> New Triple has to be created Predicate:"+$pred.getParent().getName()+" Subject: "+$triple.getSubject().getName()+"("+$triple.getSubject().getClazz().getName()+") Object: "+$triple.getObject().getName()+"("+$triple.getObject().getClazz().getName()+")" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $triple.getSubject() , $pred.getParent() , $triple.getObject() );
    insert(newtriple);
end


///// Combining algorithms


rule "combining-DefaultPermitAll"
when
    $req: InstanceOfClazz( clazz.name == "Request" )
    $adv: Advice( requestid ==  $req.getName() )
        not ( exists(  Advice( $adv.getAdvice()=="negative" , requestid == $req.getName() ) ) )

then
    System.out.println("Combining Permit All: " + $req.getName());
    System.out.println("based on advice: " + $adv);
    CombinedAdvice combadvice = new CombinedAdvice("positive", $req.getName() );
    insert(combadvice);
//    System.out.println("Combining PermitAll: " + $req.getName());
end

rule "combining-DefaultDenyAll"
when
    $req: InstanceOfClazz( clazz.name == "Request" )
    $adv: Advice( requestid ==  $req.getName() )
    not ( exists(  Advice( $adv.getAdvice()=="positive" , requestid == $req.getName() ) ) )

then
    System.out.println("Combining Deny All: " + $req.getName());
    System.out.println("based on advice: " + $adv);
    CombinedAdvice combadvice = new CombinedAdvice("negative", $req.getName() );
    insert(combadvice);

end


//DenyOverride at least one deny then deny
rule "combiningA"
when
    $adv: Advice( $reqid: requestid )

eval ( $adv.getAdvice().equalsIgnoreCase("negative") )
then
    CombinedAdvice combadvice = new CombinedAdvice("negative", $reqid );
    insert(combadvice);
//    System.out.println("CombiningA(Deny Override): " + $reqid);
end


//PermitOverride at least one permit then permit
rule "combiningC"
when
    $adv: Advice( $reqid: requestid )

eval ( $adv.getAdvice().equalsIgnoreCase("positive") )
then
    CombinedAdvice combadvice = new CombinedAdvice("positive", $reqid );
    insert(combadvice);
//    System.out.println("CombiningC(Permit Override): " + $reqid);
end

//rule "Debug-PrintAllClasses"
//when
//    $clazz: Clazz()
//then
//    System.out.println( "Clazz --> "+$clazz  );
//end
//
//rule "Debug-PrintAllInstances"
//when
//    $instanceofclass: InstanceOfClazz()
//then
//    System.out.println( "InstanceOfClazz --> "+$instanceofclass  );
//end
//
//rule "Debug-PrintAllObjectProperties"
//when
//    $objectproperty: ObjectProperty()
//then
//    System.out.println( "ObjectProperty --> "+$objectproperty  );
//end
//
//rule "Debug-PrintAllTriples"
//when
//    $triple: KnowledgeTriple()
//then
//    System.out.println( "KnowledgeTriple --> "+$triple  );
//end


rule "orbiRule1" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst135: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'orbiRule1' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("eu.singularlogic.orbi.controller.WebController.contactsList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval (!$anySubPredOP127objectInst135.getName().equalsIgnoreCase( "Thessaloniki") )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'orbiRule1' ); 
insert(advice); 
System.out.println("rule-18 positive Advice for request: " + $req.getName() + ", orbiRule1"); 
end 
rule "orbiRule1 Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst135: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'orbiRule1 Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("eu.singularlogic.orbi.controller.WebController.contactsList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval (!$anySubPredOP127objectInst135.getName().equalsIgnoreCase( "Thessaloniki") )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'orbiRule1 Negation'  ); 
insert(advice); 
System.out.println("rule-18 negative Advice for request: " + $req.getName() + ", orbiRule1 Negation "); 
end 
rule "orbiRule2" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP141: ObjectProperty( name == 'requestInSpecificHour') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP141, $reqPredOP141objectInst129: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'orbiRule2' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("eu.singularlogic.orbi.controller.WebController.contactsList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval (!$reqPredOP141objectInst129.getName().equalsIgnoreCase( "Working_hours") )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'orbiRule2' ); 
insert(advice); 
System.out.println("rule-19 positive Advice for request: " + $req.getName() + ", orbiRule2"); 
end 
rule "orbiRule2 Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP141: ObjectProperty( name == 'requestInSpecificHour') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP141, $reqPredOP141objectInst129: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'orbiRule2 Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("eu.singularlogic.orbi.controller.WebController.contactsList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval (!$reqPredOP141objectInst129.getName().equalsIgnoreCase( "Working_hours") )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'orbiRule2 Negation'  ); 
insert(advice); 
System.out.println("rule-19 negative Advice for request: " + $req.getName() + ", orbiRule2 Negation "); 
end 
rule "xchangeRule" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP140: ObjectProperty( name == 'requestInSpecificDay') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst116: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP140, $reqPredOP140objectInst127: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xchangeRule' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("eu.ubitech.xchange.app.controller.ProcessInstanceController.processList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  && eval ($reqPredOP139objectInst116.getName().equalsIgnoreCase( "OS_X") )  && eval ($reqPredOP140objectInst127.getName().equalsIgnoreCase( "Working_day") )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xchangeRule' ); 
insert(advice); 
System.out.println("rule-20 positive Advice for request: " + $req.getName() + ", xchangeRule"); 
end 
rule "xchangeRule Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP140: ObjectProperty( name == 'requestInSpecificDay') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst116: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP140, $reqPredOP140objectInst127: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xchangeRule Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("eu.ubitech.xchange.app.controller.ProcessInstanceController.processList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  && eval ($reqPredOP139objectInst116.getName().equalsIgnoreCase( "OS_X") )  && eval ($reqPredOP140objectInst127.getName().equalsIgnoreCase( "Working_day") )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xchangeRule Negation'  ); 
insert(advice); 
System.out.println("rule-20 negative Advice for request: " + $req.getName() + ", xchangeRule Negation "); 
end 
rule "xchangeRule1" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP140: ObjectProperty( name == 'requestInSpecificDay') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst116: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP140, $reqPredOP140objectInst127: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xchangeRule1' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("eu.ubitech.xchange.app.controller.CorpController.corpList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  && eval ($reqPredOP139objectInst116.getName().equalsIgnoreCase( "OS_X") )  && eval ($reqPredOP140objectInst127.getName().equalsIgnoreCase( "Working_day") )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xchangeRule1' ); 
insert(advice); 
System.out.println("rule-21 positive Advice for request: " + $req.getName() + ", xchangeRule1"); 
end 
rule "xchangeRule1 Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP140: ObjectProperty( name == 'requestInSpecificDay') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst116: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP140, $reqPredOP140objectInst127: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xchangeRule1 Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("eu.ubitech.xchange.app.controller.CorpController.corpList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  && eval ($reqPredOP139objectInst116.getName().equalsIgnoreCase( "OS_X") )  && eval ($reqPredOP140objectInst127.getName().equalsIgnoreCase( "Working_day") )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xchangeRule1 Negation'  ); 
insert(advice); 
System.out.println("rule-21 negative Advice for request: " + $req.getName() + ", xchangeRule1 Negation "); 
end 
rule "xchangeRule2" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP141: ObjectProperty( name == 'requestInSpecificHour') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP141, $reqPredOP141objectInst129: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xchangeRule2' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("eu.ubitech.xchange.app.controller.CorpController.corpList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval ($reqPredOP141objectInst129.getName().equalsIgnoreCase( "Working_hours") )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xchangeRule2' ); 
insert(advice); 
System.out.println("rule-22 positive Advice for request: " + $req.getName() + ", xchangeRule2"); 
end 
rule "xchangeRule2 Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP141: ObjectProperty( name == 'requestInSpecificHour') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP141, $reqPredOP141objectInst129: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xchangeRule2 Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("eu.ubitech.xchange.app.controller.CorpController.corpList") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  eval ($reqPredOP141objectInst129.getName().equalsIgnoreCase( "Working_hours") )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xchangeRule2 Negation'  ); 
insert(advice); 
System.out.println("rule-22 negative Advice for request: " + $req.getName() + ", xchangeRule2 Negation "); 
end 
rule "xsnRuleGateway" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleGateway' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addGateway") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xsnRuleGateway' ); 
insert(advice); 
System.out.println("rule-23 positive Advice for request: " + $req.getName() + ", xsnRuleGateway"); 
end 
rule "xsnRuleGateway Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleGateway Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addGateway") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xsnRuleGateway Negation'  ); 
insert(advice); 
System.out.println("rule-23 negative Advice for request: " + $req.getName() + ", xsnRuleGateway Negation "); 
end 
rule "xsnRuleFoi" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleFoi' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addFoi") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xsnRuleFoi' ); 
insert(advice); 
System.out.println("rule-24 positive Advice for request: " + $req.getName() + ", xsnRuleFoi"); 
end 
rule "xsnRuleFoi Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleFoi Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addFoi") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xsnRuleFoi Negation'  ); 
insert(advice); 
System.out.println("rule-24 negative Advice for request: " + $req.getName() + ", xsnRuleFoi Negation "); 
end 
rule "xsnRuleSensors" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleSensors' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addSensor") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xsnRuleSensors' ); 
insert(advice); 
System.out.println("rule-25 positive Advice for request: " + $req.getName() + ", xsnRuleSensors"); 
end 
rule "xsnRuleSensors Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleSensors Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addSensor") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xsnRuleSensors Negation'  ); 
insert(advice); 
System.out.println("rule-25 negative Advice for request: " + $req.getName() + ", xsnRuleSensors Negation "); 
end 
rule "xsnRuleObservation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleObservation' ) ) ) and ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addObservation") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   ) )
then 
Advice advice = new Advice('positive', $req.getName() , 'xsnRuleObservation' ); 
insert(advice); 
System.out.println("rule-26 positive Advice for request: " + $req.getName() + ", xsnRuleObservation"); 
end 
rule "xsnRuleObservation Negation" 
when 
$req: InstanceOfClazz( clazz.name == 'Request' )
$anySub: InstanceOfClazz( clazz.name == 'Subject' )
$pred2: ObjectProperty( name == 'requestHasObject' )
$pred3: ObjectProperty( name == 'requestHasAction' )
$predOP139: ObjectProperty( name == 'requestHasOperatingSystem') 
$predOP123: ObjectProperty( name == 'requestHasDeviceType') 
$predOP127: ObjectProperty( name == 'subjectHasLocation') 
$tr2: KnowledgeTriple( subject == $req , predicate == $pred2, $object2: object )
$tr3: KnowledgeTriple( subject == $req , predicate == $pred3, $object3: object )
$tr4: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst114: object )
$tr5: KnowledgeTriple( subject == $req , predicate == $predOP139, $reqPredOP139objectInst141: object )
$tr6: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst118: object )
$tr7: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst117: object )
$tr8: KnowledgeTriple( subject == $req , predicate == $predOP123, $reqPredOP123objectInst144: object )
$tr9: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst142: object )
$tr10: KnowledgeTriple( subject == $anySub , predicate == $predOP127, $anySubPredOP127objectInst143: object )
not ( exists( Advice ( requestid == $req.getName(), rulename == 'xsnRuleObservation Negation' ) ) ) and ( 
not ( 
eval ( $object2.getName().equalsIgnoreCase("com.siemens.xsn.web.GwRestController.addObservation") ) and 
eval ( $object3.getName().equalsIgnoreCase("POST") ) and 
(  (  eval ($reqPredOP139objectInst114.getName().equalsIgnoreCase( "Android") )  || eval ($reqPredOP139objectInst141.getName().equalsIgnoreCase( "Linux") )   )  && (  eval ($reqPredOP123objectInst118.getName().equalsIgnoreCase( "Personal_computer") )  || eval ($reqPredOP123objectInst117.getName().equalsIgnoreCase( "Smartphone") )  || eval ($reqPredOP123objectInst144.getName().equalsIgnoreCase( "Gateway") )   )  && (  eval ($anySubPredOP127objectInst142.getName().equalsIgnoreCase( "Heraklion") )  || eval ($anySubPredOP127objectInst143.getName().equalsIgnoreCase( "Tarragona") )   )   )  
) )
then 
Advice advice = new Advice('negative', $req.getName() , 'xsnRuleObservation Negation'  ); 
insert(advice); 
System.out.println("rule-26 negative Advice for request: " + $req.getName() + ", xsnRuleObservation Negation "); 
end 
